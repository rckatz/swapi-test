{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","birth_year","id","className","CardList","people","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onRequestPeople","searchField","onSearchChange","isPending","filteredPeople","filter","person","toLowerCase","includes","connect","searchPeople","requestPeople","dispatch","event","payload","target","value","fetch","then","response","json","results","catch","Boolean","window","location","hostname","match","initalStateSearch","initalStatePeople","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0a8d95e4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, birth_year, id }) => {\r\n    return(\r\n        <div className=\"tc bg-black yellow dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{birth_year}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ people }) => {\r\n    return (\r\n        <div>\r\n            {\r\n                people.map((user, i) => {\r\n                    return (\r\n                        <Card\r\n                            key={i}\r\n                            id={user.id}\r\n                            name={user.name}\r\n                            birth_year={user.birth_year}\r\n                        />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n\r\n    );\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n    return (\r\n      <div className='pa2'>\r\n        <input\r\n          className='pa3 ba b--green bg-lightest-blue'\r\n          type='search'\r\n          placeholder='search characters'\r\n          onChange={searchChange}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div style={{overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>ALERT ALERT!!! DANGER!!!</h1>\r\n        }\r\n        else {\r\n            return this.props.children\r\n        }\r\n        \r\n    }\r\n\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport './App.css';\r\nimport { setSearchField, requestPeople } from '../actions';\r\n\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchPeople.searchField,\r\n        people: state.requestPeople.people,\r\n        isPending: state.requestPeople.isPending,\r\n        error: state.requestPeople.error\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestPeople: () => dispatch(requestPeople())\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.onRequestPeople();\r\n    }\r\n\r\n    \r\n    render() {\r\n\r\n        const {searchField, onSearchChange, people, isPending} = this.props;\r\n        const filteredPeople = people.filter(person => {\r\n            return person.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n        return isPending ?\r\n            <h1>Loading...</h1> :\r\n            (\r\n                <div className='tc'>\r\n                    <h1 className='f1'>SW API Character Search</h1>\r\n                    <SearchBox searchChange={onSearchChange} />\r\n                    <Scroll>\r\n                        <ErrorBoundry>\r\n                            <CardList people={filteredPeople} />\r\n                        </ErrorBoundry>\r\n                    </Scroll>\r\n\r\n                </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {CHANGE_SEARCH_FIELD, REQUEST_PEOPLE_PENDING, \r\n    REQUEST_PEOPLE_SUCCESS, REQUEST_PEOPLE_FAILED} from './constants'\r\n\r\nexport const setSearchField  = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestPeople = () => (dispatch) => {\r\n    dispatch({type: REQUEST_PEOPLE_PENDING});\r\n    fetch('https://swapi.co/api/people/1')\r\n            .then(response => response.json())\r\n            .then(results => dispatch({type: REQUEST_PEOPLE_SUCCESS,\r\n                payload: results}))\r\n            .catch(error => dispatch({type: REQUEST_PEOPLE_FAILED, payload: error}));\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_PEOPLE_PENDING = 'REQUEST_PEOPLE_PENDING';\r\nexport const REQUEST_PEOPLE_SUCCESS = 'REQUEST_PEOPLE_SUCCESS';\r\nexport const REQUEST_PEOPLE_FAILED = 'REQUEST_PEOPLE_FAILED';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {CHANGE_SEARCH_FIELD, REQUEST_PEOPLE_PENDING, \r\n    REQUEST_PEOPLE_SUCCESS, REQUEST_PEOPLE_FAILED} from './constants'\r\n\r\nconst initalStateSearch = {\r\n    searchField: ''\r\n}\r\nexport const searchPeople = \r\n    (state=initalStateSearch, action={}) => {\r\n        switch(action.type) {\r\n            case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload});\r\n            default:\r\n                return state;\r\n        }\r\n} \r\n\r\nconst initalStatePeople = {\r\n    isPending: false,\r\n    people: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestPeople = (state=initalStatePeople, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_PEOPLE_PENDING:\r\n            return Object.assign({}, state, {isPending: true});\r\n        case REQUEST_PEOPLE_SUCCESS:\r\n            return Object.assign({}, state, {people: action.payload, isPending: false});\r\n        case REQUEST_PEOPLE_FAILED:\r\n            return Object.assign({}, state, {error: action.payload, isPending: false});\r\n        default: \r\n            return state;\r\n    }\r\n} ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport {searchPeople, requestPeople} from './reducers'\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchPeople, requestPeople});\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\n\nReactDOM.render( <Provider store= {store}>\n                    <App />\n                </Provider>, \n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}